# Sistema de Gestão de Refeições

Este projeto implementa um sistema de gestão de refeições para funcionários, desenvolvido em C como parte da disciplina de Programação Imperativa.

## Guia de Desenvolvimento Passo a Passo

### 1. Configuração Inicial do Projeto

1. Clone este repositório:
   ```bash
   git clone [seu-repositorio]
   cd PI_Proj
   ```

2. Crie a estrutura de diretórios:
   ```
   mkdir src data docs latex tests
   ```

### 2. Desenvolvimento do Código

#### 2.1 Estruturas de Dados
1. Defina as estruturas em `src/estruturas.h`:
   - Funcionário (número, nome, NIF, telefone)
   - Ementa (código, dia, descrição, tipo, calorias)
   - Escolha (número funcionário, código ementa, data)

#### 2.2 Implementação das Funcionalidades
1. Crie os módulos básicos:
   - `funcionarios.h/c`: Gestão de funcionários
   - `ementas.h/c`: Gestão de ementas
   - `escolhas.h/c`: Gestão de escolhas
   - `utils.h/c`: Funções utilitárias

2. Implemente as funções principais:
   - Carregar dados de arquivos
   - Listar refeições por dia
   - Gerar estatísticas
   - Calcular médias de calorias

#### 2.3 Interface de Linha de Comando
Implemente os argumentos:
- `-ajuda`: Mostra instruções de uso
- `-tab`: Usa arquivos separados por tab
- `-bin`: Usa arquivos binários

### 3. Documentação

#### 3.1 Documentação do Código (Doxygen)
1. Instale o Doxygen
2. Documente cada função usando o formato:
   ```c
   /**
    * @brief Descrição breve
    * @param param1 Descrição do parâmetro
    * @return O que a função retorna
    */
   ```

#### 3.2 Relatório LaTeX
1. Crie a estrutura básica:
   - Introdução
   - Desenvolvimento
   - Conclusão
2. Inclua:
   - Figuras e tabelas
   - Bibliografia
   - Índices

### 4. Controle de Versão

1. Crie branches para features:
   ```bash
   git checkout -b feature/nova-funcionalidade
   ```

2. Faça commits frequentes:
   ```bash
   git add .
   git commit -m "Descrição clara da alteração"
   ```

3. Use pull requests para revisão de código

### 5. Compilação e Testes

1. Use o Makefile para compilar:
   ```bash
   make
   ```

2. Execute os testes:
   ```bash
   make test
   ```

## Requisitos

- GCC (GNU Compiler Collection)
- Make
- Doxygen (para documentação)
- LaTeX (para o relatório)

## Uso

```bash
./programa [-ajuda] [-tab] [-bin] [arquivo_funcionarios] [arquivo_ementas] [arquivo_escolhas]
```

## Estrutura do Projeto

```
PI_Proj/
├── src/           # Código fonte
├── data/          # Arquivos de dados
├── docs/          # Documentação
├── latex/         # Relatório
├── tests/         # Testes
└── Makefile
```

## Contribuindo

1. Faça um fork do projeto
2. Crie sua branch de feature
3. Faça commit das alterações
4. Push para a branch
5. Abra um Pull Request

## Checklist de Desenvolvimento

- [ ] Estruturas de dados definidas
- [ ] Funções básicas implementadas
- [ ] Argumentos de linha de comando
- [ ] Documentação Doxygen
- [ ] Relatório LaTeX
- [ ] Testes implementados
- [ ] Makefile configurado

## Referências

- [Doxygen Manual](https://www.doxygen.nl/manual/)
- [LaTeX Documentation](https://www.latex-project.org/help/documentation/)
- [Git Documentation](https://git-scm.com/doc)
